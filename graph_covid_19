# -*- coding: utf-8 -*-
"""
@author: huyng
"""

import pandas as pd
import matplotlib.pyplot as plt 
from matplotlib.ticker import MaxNLocator

# Link to raw data
link_confirmed = r"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
link_recovered = r"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv"
link_deaths = r"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv"

# Main function

def get_raw_df(link):
    return pd.read_csv(link)

# Transform raw data into semi time series (time index still duplicates for provinces)
def transform_raw_df(df):
    """Input: raw html DataFrame fed directly from CSSEGISandData/COVID-19
    Output: time series DataFrame"""
    df = df.melt(['Country/Region', 'Province/State', 'Lat', 'Long'])
    df = df.rename(columns={'variable':'Date', 'value':'Number of Cases'})
    df.index = pd.to_datetime(df['Date'])
    return df

# Aggregate all cases into a single dataframe
def aggregate_df(df_cfm,df_rcv,df_dth):
    """Input: transformed Confirmed, Recovered, Deaths df
    Output: aggregated df"""
    df = df_cfm.loc[:,['Country/Region', 'Province/State']]
    df['Recovered'] = df_rcv['Number of Cases']
    df['Deaths'] = df_dth['Number of Cases']
    df['Active'] = df_cfm['Number of Cases'] - df['Recovered'] - df['Deaths']
    return df

# Pivot to transform row values into time series (no duplication in time index)
def pivot_df(df):
    """Input aggregated df
    Output: master df and slicer"""
    # Fill missing province column label from country column
    new_df = df[['Country/Region', 'Province/State']].fillna(method='ffill',axis=1)
    new_df[['Active', 'Recovered', 'Deaths']] = df[['Active', 'Recovered', 'Deaths']]
    new_df = pd.pivot_table(new_df,index=new_df.index,
                            columns=['Country/Region', 'Province/State'],)
    new_df.rename_axis(columns=['Status','Country','Province'],inplace=True)
    new_index = ['Active', 'Recovered', 'Deaths']
    new_df = new_df.reindex(new_index, axis=1, level=0)
    idx = pd.IndexSlice 
    return new_df, idx # return multi-index DataFrame with slicer
    
    
# Dict for location coordinate: loc_coord[country][province]=(lat,long)
def generate_loc_coord(df): # df_cfm is the most completed dataset. Use it
    """Return coordinate df"""
    df = df[['Country/Region', 'Province/State', 'Lat', 'Long']]
    df = df.fillna(method='ffill',axis=1,limit=1)
    return df

# Visualization 

def visualize(dataframe,country,margin_rate=0.05):
    """ 'World','world','w','worldwide','Worldwide' for worldwide statistics"""
    idx = pd.IndexSlice
    df = dataframe
    if country in ['World','world','w','worldwide','Worldwide']:
        df = df.groupby('Status',axis=1).sum()
        country = 'Worldwide'
    else:
        df = df.loc[idx[:],idx[:,country]].groupby('Status',axis=1).sum()
    df_prc = df.divide(df.sum(axis=1),axis=0)*100
    # Main figure
    fig, axes = plt.subplots(2,1,True,False,figsize=(16.5,20))
    # Figure 1 - absolute number
    df.plot.area(title=f"Confirmed cases - {country}", ax=axes[0], 
                 figsize=(16.5,11),grid=True)
    axes[0].set_ylabel('Number of cases')
    axes[0].legend(loc=2)
    axes[0].yaxis.set_major_locator(MaxNLocator(integer=True))
    # Prepare for annotation
    x = df.index[-1]
    y1 = df['Active'][-1]
    y2 = df['Recovered'][-1]
    y3 = df['Deaths'][-1]
    total = y1 + y2 + y3
    y1_rate = round(y1/total*100,2)
    y2_rate = round(y2/total*100,2)
    y3_rate = round(y3/total*100,2)
    # Ensure approriate spacing between all annotations
    # Figure 1 - check and fix for spacing
    margin = total*margin_rate
    c_y1 = y1/2
    c_y2 = y1 + (y2/2)
    c_y3 = y1 + y2 + (y3/2)
    if c_y3 - margin < c_y2:
        c_y2 = c_y3 - margin # shift recovered down if deaths and recovered are close
    elif c_y2 - margin <  c_y1:
        c_y2 = c_y1 + margin # shift recovered up if recovered and active are close
    # Figure 1 - annotation
    axes[0].annotate(f'Active: {y1}',(x, c_y1),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    axes[0].annotate(f'Recovered: {y2}',(x,c_y2),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    axes[0].annotate(f'Deaths: {y3}',(x,c_y3),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    # Figure 2 - percentage
    df_prc.plot(title=f'Percentage of outcome - {country}', ax=axes[1], 
            figsize=(16.5,11),grid=True)
    axes[1].set_ylabel('Percentage')
    axes[1].legend(loc=2)
    # Figure 2 - check and fix for spacing
    margin = margin_rate*100
    sr_rate = pd.Series({'y1':y1_rate,'y2':y2_rate,'y3':y3_rate})
    sr_rate = sr_rate.sort_values(ascending=False)
    sr_diff = abs(sr_rate.diff())
    if sr_diff.min() < margin:
        if sr_diff.idxmin() == sr_rate.idxmin():
            sr_rate[1] = sr_rate[2] + margin
        else:
            sr_rate[1] = sr_rate[0] - margin
    else:
        pass
    # Figure 2 - annotation
    axes[1].annotate(f'Active: {y1_rate}%',(x,sr_rate['y1']),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    axes[1].annotate(f'Recovered: {y2_rate}%',(x,sr_rate['y2']),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    axes[1].annotate(f'Deaths: {y3_rate}%',(x,sr_rate['y3']),xytext=(5,0),
                     textcoords='offset pixels',va='center')
    return None

### Data Step
    
if __name__ == '__main__':
    df_cfm = transform_raw_df(pd.read_csv(link_confirmed))
    df_rcv = transform_raw_df(pd.read_csv(link_recovered))
    df_dth = transform_raw_df(pd.read_csv(link_deaths))
    df_master,idx = pivot_df(aggregate_df(df_cfm,df_rcv,df_dth))
    df_coord = generate_loc_coord(df_cfm)
